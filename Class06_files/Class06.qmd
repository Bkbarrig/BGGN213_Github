---
title: "Class 6: R functions"
author: Bianca Barriga
format: pdf
---

## Functions in R

In this class we will work through the process of developing our own function for calculating average grades for fictional students in a fictional class.

We are going to start with a simplified version of the problem where I know what the answer should be.

# Example input vectors to start with

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90) 
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80) 
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

To get the average grade we can use the function `mean()`.

```{r}
mean(student1)
```

The `min()` will return the smallest value.

```{r}
min(student1)
```

and related function `which.min()` will return the index of the min value

```{r}
which.min(student1)
```

```{r}
x <- 1:5
y <- which.max(x)
z <- (x[-y])
mean(z)
```

```{r}
x[-3]
```

Let's put these bits together to find the average score dropping the lowest single score.

```{r}
mean(student1[-which.min(student1)])
```

```{r}
mean(student2[-which.min(student2)])

```

We need to remove NA's from student 2 gradebook.

```{r}
mean(student2[-which.min(student2)], na.rm=TRUE)
```

```{r}
student3
```

```{r}
mean(student3[-which.min(student3)], na.rm=TRUE)
```

We need to find NA and replace with 0. Then calculate the mean.

```{r}
y <- replace(student3, is.na(student3), 0)
mean(y[-which.min(y)])
```

```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```
We now have our working code snipet that can become the body of our function. 

Recall that all functions in R have at least 3 things: 
-name(we pick this)
-arguments(input to the function)
body(where the work gets done)


```{r}
grades <- function(y) {
  z <- replace(y, is.na(y), 0)
  mean(z[-which.min(z)])}
```


```{r}
grades(student1)
grades(student2)
grades(student3)

```

Establish a new function. 

```{r}
grade <- function(x) {
  #map NA values to zero 
  x[is.na(x)] <- 0
  mean(x[-which.min(x)])
}
```

Lers use this new function `grade()`
```{r}
grade(student1)
grade(student2)
grade(student3)
```


>Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

To read this CSV file we are going to use the `read.csv()`. 

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput")
```
As is, the student names are under data points and not official row names, so we need to modify the inputs to specify row names. 

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names=1)
head(gradebook)
```

Now use our function for this gradebook example

This wont work. 

```{r}
#grade(gradebook)
```
We can use the `apply()` function to grade all the students in this gradbook. The `apply()` function will apply any function over the rows (MARGIN = 1) or columns (MARGIN=2) of any data.frame/matrix etc, 
#apply function inputs, 1 indicates rows, 2 indicates columns 

```{r}
results <- apply(gradebook,1, grade)
results

```
>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(results)
```
>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
which.min(apply(gradebook,2,sum,na.rm = T))
```

I guess we need to mask those NA values to zero. 
```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask

```

```{r}
which.min(apply(mask,2,sum,na.rm = T))
```


>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


```{r}
#results
mask$hw5
cor(mask$hw5, results)
```

```{r}
#results
cor(mask$hw2, results)
```

Can we use the `apply()` function to do this all for us?
```{r}
apply(mask, 2, cor, y=results)

```











