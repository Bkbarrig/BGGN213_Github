---
title: "Class 9: Structual Bioinformatics"
author: "Bianca Barriga"
format: pdf
---

```{r}
PDB.df <- read.csv("/Users/biancabarriga/Desktop/bggn213/Class09_files/Data Export Summary.csv", row.names = 1)
head(PDB.df)
```

```{r}
knitr::include_graphics("/Users/biancabarriga/Desktop/bggn213/1HSG.png")
```


>Q1. What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

```{r}
percent <- (sum(PDB.df$X.ray) + sum(PDB.df$EM)) / sum(PDB.df$Total)
percent

```
The percent of structures in the PDB solved by X-ray and EM is ~93%.

>Q2. What proportion of structures in the PDB are protein?

```{r}
percentProtein <- PDB.df$Total[1]/ sum(PDB.df$Total)
percentProtein
```
The proportion of structures in the PDB that are protein are ~87%. 


>Q3. Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

```{r}
knitr::include_graphics("/Users/biancabarriga/Desktop/bggn213/1HSG3.png")
```
 
There are 4,791 structures for HIV-1. 

## The PDB format

Now download the “PDB File” for the HIV-1 protease structure with the PDB identifier 1HSG. On the website you can “Display” the contents of this “PDB format” file.

Alternatively, you can examine the contents of your downloaded file in a suitable text editor or use the Terminal tab from within RStudio (or your favorite Terminal/Shell) and try the following command:

```{r}
#less ~/Downloads/1hsg.pdb         ## (use ‘q’ to quit)
```



>Q4. Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

Ball and stick representation - not showing H atoms only oxygen. 

>Q5. There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

HOH332

>Q6. Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document

```{r}
knitr::include_graphics("/Users/biancabarriga/Desktop/bggn213/1HSG5.png")
```

.


## Introduction to Bio3D in R 

Install the Bio3D package 
```{r}
#install.packages("bio3d")

```
Load the Bio3D package

```{r}
library(bio3d)
```

Read PDB file into R

```{r}
pdb <- read.pdb("1hsg")
```
Get a summary of the contents
```{r}
pdb
```



>Q7. How many amino acid residues are there in this pdb object?

There are 198 amino acid residues. 

```{r}
aa <- length(pdb$seqres)
aa

```
There are 198 amino acids. 

>Q8. Name one of the two non-protein residues?

HOH[127]

>Q9. How many protein chains are in this structure?

2 protein chains


Note that the attributes (+ attr:) of this object are listed on the last couple of lines. To find the attributes of any such object you can use:


```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```

##Predicting functional motions of a single structure

Let’s read a new PDB structure of Adenylate Kinase and perform Normal mode analysis.

```{r}
adk <- read.pdb("6s36")
```

```{r}
adk
```
#perform flexbility predicion

```{r}
m <- nma(adk)
```
```{r}
plot(m)
```
To view a “movie” of these predicted motions we can generate a molecular “trajectory” with the mktrj() function.

```{r}
mktrj(m, file="adk_m7.pdb")
```

Now we can load the resulting “adk_m7.pdb” PDB into Mol* with the “Open Files” option on the right side control panel. Once loaded click the “play” button to see a movie (see image below). We will discuss how this method works at the end of this lab when we apply it across a large set of homologous structures.


## Comparative structure analysis of Adenylate Kinase

The goal of this section is to perform principal component analysis (PCA) on the complete collection of Adenylate kinase structures in the protein data-bank (PDB).

```{r}
# Install packages in the R console NOT your Rmd/Quarto file

#install.packages("bio3d")
#install.packages("devtools")
#install.packages("BiocManager")

#BiocManager::install("msa")
#devtools::install_bitbucket("Grantlab/bio3d-view")
```

>Q10. Which of the packages above is found only on BioConductor and not CRAN?

msa package

>Q11. Which of the above packages is not found on BioConductor or CRAN?

bio3d-view

>Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

True. 

## Search and retrieve ADK structures

Error need to instal httr package

```{r}
#install.packages("httr")
```

```{r}
library(bio3d)
aa <- get.seq("1ake_A")
```

```{r}
aa
```
>Q13. How many amino acids are in this sequence, i.e. how long is this sequence?

214 amino acids

Now we can use this sequence as a query to BLAST search the PDB to find similar sequences and structures.
#load the sequence and then blast 
```{r}
# Blast or hmmer search 
b <- blast.pdb(aa)
```

The function plot.blast() facilitates the visualization and filtering of the Blast results. It will attempt to set a seed position to the point of largest drop-off in normalized scores (i.e. the biggest jump in E-values). In this particular case we specify a cutoff (after initial plotting) of to include only the relevant E.coli structures:

```{r}
# Plot a summary of search results
hits <- plot(b)
```
Figure 6: Blast results. Visualize and filter blast results through function plot.blast(). Here we proceed with only the top scoring hits (black).

```{r}
# List out some 'top hits'
head(hits$pdb.id)
```

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```

The Blast search and subsequent filtering identified a total of 13 related PDB structures to our query sequence. The PDB identifiers of this collection are accessible through the `$pdb.id` attribute to the hits object (i.e. `hits$pdb.id`). Note that adjusting the cutoff argument (to `plot.blast())` will result in a decrease or increase of hits.

We can now use function `get.pdb()` and `pdbslit()` to fetch and parse the identified structures.

```{r}
# Download related PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```


## Align and superpose structures

Next we will use the `pdbaln()` function to align and also optionally fit (i.e. superpose) the identified PDB structures.

```{r}
#Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")

```


```{r}
# Vector containing PDB codes for figure axis
ids <- basename.pdb(pdbs$id)

# Draw schematic alignment
op <-par(mar = c(0, 0, 0, 0))
#plot(pdbs, labels=ids)
par(op)
```
## Annotate collected PDB structures

The function `pdb.annotate()` provides a convenient way of annotating the PDB files we have collected. Below we use the function to annotate each structure to its source species. This will come in handy when annotating plots later on:

```{r}
anno <- pdb.annotate(ids)
unique(anno$source)
anno
```

#Principal componen analysis

Function `pca()` provides principal component analysis (PCA) of the structure data. PCA is a statistical approach used to transform a data set down to a few important components that describe the directions where there is most variance. In terms of protein structures PCA is used to capture major structural variations within an ensemble of structures.

PCA can be performed on the structural ensemble (stored in the pdbs object) with the function `pca.xyz()`, or more simply `pca()`.

```{r}
#perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```

Function `rmsd()` will calculate all pairwise RMSD values of the structural ensemble. This facilitates clustering analysis based on the pairwise structural deviation:


```{r}
# Calculate RMSD
rd <- rmsd(pdbs)

# Structure-based clustering
hc.rd <- hclust(dist(rd))
grps.rd <- cutree(hc.rd, k=3)

plot(pc.xray, 1:2, col="grey50", bg=grps.rd, pch=21, cex=1)
```


