---
title: "Class 10: Halloween Mini-project "
author: "Bianca Barriga"
format: pdf
---

## Importing candy data

```{r}
candy_file <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/candy-power-ranking/candy-data.csv", row.names = 1)

candy = candy_file


head(candy)
```
>Q1. How many different candy types are in this data set?

85 different candy types

```{r}
dim(candy)
```

>Q2. How many fruity candy types in this data set?

38 fruity candy types 


```{r}
sum(candy$fruity)
```

## What is your favorite candy?

```{r}
candy["Twix",]$winpercent
```

>Q3. What is your favorite candy in the dataset and what is it's winpercent value?

Almond Joy - 84.18%


```{r}
candy["Reese's Peanut Butter cup",]$winpercent
```

>Q4. What is the winpercent value for "Kit Kat"?

Kit Kat - 76.76%

```{r}
candy["Kit Kat",]$winpercent
```

>Q5. What is the winpercent value for "Tootsie Roll Snack Bars"?

49.6535

```{r}
candy["Tootsie Roll Snack Bars",]$winpercent
```

There is a useful `skim()` function in the skimr package that can help give you a quick overview of a given dataset. Let's install this package and try it on our candy data.

```{r}

#install.packages("skimr")
```


```{r}
library("skimr")
skim(candy)
```


From the use of `skim()` function use the output to answer the following:

>Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

Win percent, n_missing, complete_rate 


>Q7. What do you think a zero and one represent for the candy$chocolate column?

True or False. If the candy is chocolate it will have a 1, if the candy is not chocolate it will have a 0. 

```{r}
candy$chocolate
```

A good place to start any exploratory analysis is with a histogram. You can do this most easily with the base R function hist(). Alternatively, you can use ggplot() with geom_hist(). Either works well in this case and (as always) its your choice.

```{r}
library(ggplot2)
```


>Q8.  Plot a histogram of winpercent values

```{r}

hist(candy$winpercent)
```



>Q9. Is the distribution of winpercent values symmetrical?

No

>Q10. Is the center of the distribution above or below 50%?

```{r}
mean(candy$winpercent)
```


>Q11. On average is chocolate candy higher or lower ranked than fruit candy?

Yes

```{r}
chocolate <- candy$winpercent[as.logical(candy$chocolate)]
fruit <- candy$winpercent[as.logical(candy$fruity)]
mean(chocolate) > mean(fruit)
```

>Q12. Is this difference statistically significant?

yes

```{r}

stat <- t.test(chocolate, fruit)
stat

```

## Overall Candy Rankings

Let’s use the base R `order()` function together with `head()` to sort the whole dataset by winpercent. Or if you have been getting into the tidyverse and the dplyr package you can use the `arrange()` function together with `head()` to do the same thing and answer the following questions:


>Q13. What are the five least liked candy types in this set?

Nik L Nip, Boston Baked Beans, Chiclets, Super Bubble, Jawbusters

```{r}

head(candy[order(candy$winpercent),], n=5)

```


>Q14. What are the top 5 all time favorite candy types out of this set?

Snickers, Kit Kat, Twix, Reese's Miniatures, Reese's Peanut Butter cup 

```{r}

tail(candy[order(candy$winpercent),], n=5)

```
To examine more of the dataset in this vain we can make a barplot to visualize the overall rankings. We will use an iterative approach to building a useful visulization by getting a rough starting plot and then refining and adding useful details in a stepwise process.

>Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
library(ggplot2)



candy$winpercent <- as.integer(candy$winpercent)

win <- data.frame(candy$winpercent)

ggplot(win) + 
  aes(candy$winpercent,row.names(candy)) +
  geom_col()
  


```
>Q16. This is quite ugly, use the reorder() function to get the bars sorted by winpercent?

HINT: You can use aes(winpercent, reorder(rownames(candy),winpercent)) to improve your plot.

```{r}

ggplot(win) + 
  aes(candy$winpercent, reorder(rownames(candy),candy$winpercent)) +
  geom_col()
  

```

Let’s setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.


```{r}
my_cols=rep("black", nrow(candy))
my_cols[as.logical(candy$chocolate)] = "chocolate"
my_cols[as.logical(candy$bar)] = "brown"
my_cols[as.logical(candy$fruity)] = "pink"
```

Now let’s try our barplot with these colors. Note that we use fill=my_cols for geom_col(). Experiment to see what happens if you use col=mycols.

```{r}
ggplot(win) + 
  aes(candy$winpercent, reorder(rownames(candy),candy$winpercent)) +
  geom_col(fill=my_cols) 
```
>Q17. What is the worst ranked chocolate candy?

sixlets 

>Q18. What is the best ranked fruity candy?

starburst 

## Taking a look at pricepoint

What about value for money? What is the the best candy for the least money? One way to get at this would be to make a plot of winpercent vs the pricepercent variable. The pricepercent variable records the percentile rank of the candy’s price against all the other candies in the dataset. Lower vales are less expensive and high values more expensive.

To this plot we will add text labels so we can more easily identify a given candy. There is a regular `geom_label()` that comes with ggplot2. However, as there are quite a few candys in our dataset lots of these labels will be overlapping and hard to read. To help with this we can use the `geom_text_repel()` function from the ggrepel packag

```{r}
#install.packages("ggrepel")
```



```{r}
library(ggrepel)

# How about a plot of price vs win
ggplot(win) +
  aes(candy$winpercent, candy$pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) + 
  geom_text_repel(col=my_cols, size=3.3, max.overlaps = 5)
```

>Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reese's miniatures

>Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

Nik L Nip, Nestle Smarties, Ring pop, Hershey's Krackel, Hershey's Milk Chocolate 

```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )
```

## Exploring the correlation structure 

Now that we’ve explored the dataset a little, we’ll see how the variables interact with one another. We’ll use correlation and view the results with the corrplot package to plot a correlation matrix.

```{r}
#install.packages("corrplot")
```


```{r}
library(corrplot)
```


```{r}
cij <- cor(candy)
corrplot(cij)
```
>Q22. Examining this plot what two variables are anti-correlated (i.e. have minus values)?

chocolate and fruity

>Q23. Similarly, what two variables are most positively correlated?

chocolate and win percent 

## Principal Component Analysis 

Let’s apply PCA using the `prcomp()` function to our candy dataset remembering to set the scale=TRUE argument.

Side-note: Feel free to examine what happens if you leave this argument out (i.e. use the default scale=FALSE). Then examine the `summary(pca)` and `pca$rotation[,1]` component and see that it is dominated by winpercent (which is after all measured on a very different scale than the other variables).


```{r}
pca <- prcomp(candy, scale = TRUE)
summary(pca)
plot(pca$x[,1:2])
```


```{r}
plot(pca$x[,1:2], col=my_cols, pch=16)

```


We can make a much nicer plot with the ggplot2 package but it is important to note that ggplot works best when you supply an input data.frame that includes a separate column for each of the aesthetics you would like displayed in your final plot. To accomplish this we make a new data.frame here that contains our PCA results with all the rest of our candy data. We will then use this for making plots below

```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```




```{r}
p <- ggplot(my_data) + 
        aes(x=PC1, y=PC2, 
            size=winpercent/100,  
            text=rownames(my_data),
            label=rownames(my_data)) +
        geom_point(col=my_cols)

p
```
Again we can use the ggrepel package and the function ggrepel::geom_text_repel() to label up the plot with non overlapping candy names like. We will also add a title and subtitle like so:

```{r}
library(ggrepel)

p + geom_text_repel(size=3.3, col=my_cols, max.overlaps = 7)  + 
  theme(legend.position = "none") +
  labs(title="Halloween Candy PCA Space",
       subtitle="Colored by type: chocolate bar (dark brown), chocolate other (light brown), fruity (red), other (black)",
       caption="Data from 538")
```

see more candy labels you can change the max.overlaps value to allow more overlapping labels or pass the ggplot object p to plotly like so to generate an interactive plot that you can mouse over to see labels:

```{r}
#install.packages("plotly")
```

```{r}
library(plotly)
```
```{r}
ggplotly(p)
```
Let’s finish by taking a quick look at PCA our loadings. Do these make sense to you? Notice the opposite effects of chocolate and fruity and the similar effects of chocolate and bar (i.e. we already know they are correlated).

```{r}
par(mar=c(8,4,2,2))
barplot(pca$rotation[,1], las=2, ylab="PC1 Contribution")
```

>Q24. What original variables are picked up strongly by PC1 in the positive direction? Do these make sense to you?

fruity, hard, and pluribus. Yes this makes sense because fruity candies are often hard candies and come in bags of multiples. 

HINT. pluribus means the candy comes in a bag or box of multiple candies





